<?xml version='1.0' encoding='UTF-8' standalone='no'?><ResultsSession buildId="CLI-DEMO1-2025-07-17" date="07/17/25 15:59:49" endTime="1970-01-01T03:00:00+03:00" machine="ESL1" project="CLI-DEMO1" tag="MISRA C 2023 (MISRA C 2012)" time="2025-07-17T15:59:49+03:00" toolName="C++test" toolVer="2025.1.0.20250523B2782" user="danie">
   <TestParameters cmdLn="C++test: -config c++test.builtin://MISRA C 2023 (MISRA C 2012) "/>
   <TestConfig machine="ESL1" name="MISRA C 2023 (MISRA C 2012)" pseudoUrl="c++test.builtin://MISRA C 2023 (MISRA C 2012)" user="danie"/>
   <Authors>
      <Author id="dev1" name="danie"/>
   </Authors>
   <VersionInfos>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="IExecutionViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="InsureViolation" ver="3"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.scope" resultId="IScopeProjectInfo" ver="3"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationInfo" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationProjectInfo" ver="2"/>
   </VersionInfos>
   
      <Locations>
      <Loc fsPath="C:\Parasoft\MLM_FP-2_BD-TRS-LOCK-1\MLM_FP-2_BD-TRS-LOCK-1\MLM_FP-2_BD-TRS-LOCK-1.cpp" loc="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" projPath="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1" project="MLM_FP-2_BD-TRS-LOCK-1"/>
   </Locations>
   
   
   <Scope>
      <ProjectInformations>
         <ScopeProjectInfo fltFiles="1" fltLns="45" project="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1" totFiles="1" totLns="45"/>
      </ProjectInformations>
   </Scope>
   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:31">
      <Projects>
         <Project bdCheckedFiles="1" bdTotalFiles="1" checkedFiles="1" checkedLns="45" name="MLM_FP-2_BD-TRS-LOCK-1" qfixErrs="0" suppErrs="0" totErrs="16" totFiles="1" totLns="45"/>
      </Projects>
      <TestingProcessProblems>
         <StaticAnalyzerTestingProcessProblem tested="[WARNING] Validation problems with rule mapping/cloning:">
            <ErrorList>
               <Error val="The rule ID JSF-001 used for mapping or cloning of the METRICS-25 rule already exists in the system."/>
               <Error val="The rule ID JSF-003 used for mapping or cloning of the METRICS-28 rule already exists in the system."/>
               <Error val="The rule ID JSF-003_b used for mapping or cloning of the METRICS-42 rule already exists in the system."/>
               <Error val="The rule ID JSF-009 used for mapping or cloning of the MISRA-005 rule already exists in the system."/>
               <Error val="The rule ID JSF-010 used for mapping or cloning of the MISRA-006 rule already exists in the system."/>
               <Error val="The rule ID JSF-011 used for mapping or cloning of the MISRA2004-4_2 rule already exists in the system."/>
               <Error val="The rule ID JSF-012 used for mapping or cloning of the CODSTA-48 rule already exists in the system."/>
               <Error val="The rule ID JSF-013 used for mapping or cloning of the MISRA-008 rule already exists in the system."/>
               <Error val="The rule ID JSF-014 used for mapping or cloning of the PORT-01 rule already exists in the system."/>
               <Error val="The rule ID JSF-015 used for mapping or cloning of the MISRA-004_a rule already exists in the system."/>
            </ErrorList>
         </StaticAnalyzerTestingProcessProblem>
      </TestingProcessProblems>
      <Rules>
         <RulesList>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-DIR_4_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Avoid null pointer dereferencing" id="MISRAC2012-DIR_4_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Avoid division by zero" id="MISRAC2012-DIR_4_1-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRAC2012-DIR_4_1-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-DIR_4_1-e" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-DIR_4_1-g" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-DIR_4_1-h" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-DIR_4_1-i" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Do not compare two unrelated pointers" id="MISRAC2012-DIR_4_1-j" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Avoid wraparounds when performing arithmetic integer operations" id="MISRAC2012-DIR_4_1-k" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Avoid signed integer overflows" id="MISRAC2012-DIR_4_1-l" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_1" desc="Avoid data loss when converting between integer types" id="MISRAC2012-DIR_4_1-m" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_10" desc="Use multiple include guards" id="MISRAC2012-DIR_4_10-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_11" desc="Validate values passed to library functions" id="MISRAC2012-DIR_4_11-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_12" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-DIR_4_12-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_13" desc="Ensure resources are freed" id="MISRAC2012-DIR_4_13-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_13" desc="Do not use resources that have been freed" id="MISRAC2012-DIR_4_13-b" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_13" desc="Do not free resources using invalid pointers" id="MISRAC2012-DIR_4_13-c" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_13" desc="Do not abandon unreleased locks" id="MISRAC2012-DIR_4_13-d" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_13" desc="Avoid double locking" id="MISRAC2012-DIR_4_13-e" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_13" desc="Do not release a lock that has not been acquired" id="MISRAC2012-DIR_4_13-f" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Avoid tainted data in array indexes" id="MISRAC2012-DIR_4_14-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Avoid potential integer overflow/underflow on tainted data" id="MISRAC2012-DIR_4_14-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Avoid buffer read overflow from tainted data" id="MISRAC2012-DIR_4_14-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Avoid buffer write overflow from tainted data" id="MISRAC2012-DIR_4_14-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Protect against command injection" id="MISRAC2012-DIR_4_14-e" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Protect against file name injection" id="MISRAC2012-DIR_4_14-f" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Protect against SQL injection" id="MISRAC2012-DIR_4_14-g" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Prevent buffer overflows from tainted data" id="MISRAC2012-DIR_4_14-h" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRAC2012-DIR_4_14-i" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Protect against environment injection" id="MISRAC2012-DIR_4_14-j" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Avoid printing tainted data on the output console" id="MISRAC2012-DIR_4_14-k" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_14" desc="Exclude unsanitized user input from format strings" id="MISRAC2012-DIR_4_14-l" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_15" desc="Do not use floating-point expressions which may result in NaN and infinity values" id="MISRAC2012-DIR_4_15-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_2" desc="All usage of assembler shall be documented" id="MISRAC2012-DIR_4_2-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_3" desc="Assembly language shall be encapsulated and isolated" id="MISRAC2012-DIR_4_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot;" id="MISRAC2012-DIR_4_4-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot; using Doxygen comments" id="MISRAC2012-DIR_4_4-b" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_5" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRAC2012-DIR_4_5-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_6" desc="A typedef for a standard integer type should contain the number indicating its size in its name" id="MISRAC2012-DIR_4_6-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_6" desc="The names of standard signed integer types and standard unsigned integer types should not be used" id="MISRAC2012-DIR_4_6-b" sev="4">
               <Stats authTot="6;" total="6"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_6" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRAC2012-DIR_4_6-c" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_6" desc="The names of standard floating-point types should not be used" id="MISRAC2012-DIR_4_6-d" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_6" desc="A typedef for a standard floating-point type should contain the number indicating its size in its name" id="MISRAC2012-DIR_4_6-e" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_7" desc="Consistently check the returned value of non-void functions" id="MISRAC2012-DIR_4_7-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_7" desc="Always check the returned value of non-void function" id="MISRAC2012-DIR_4_7-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_8" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRAC2012-DIR_4_8-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_4_9" desc="A function should be used in preference to a function-like macro" id="MISRAC2012-DIR_4_9-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_5_1" desc="Do not use global variable with different locks set" id="MISRAC2012-DIR_5_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_5_1" desc="Variable should be used in context of single critical section" id="MISRAC2012-DIR_5_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_5_1" desc="There shall be no data races between threads" id="MISRAC2012-DIR_5_1-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_5_2" desc="Do not acquire locks in different order" id="MISRAC2012-DIR_5_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-DIR_5_3" desc="A thread should not be created by another thread" id="MISRAC2012-DIR_5_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_1" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRAC2012-RULE_10_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_1" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_1" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_1" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRAC2012-RULE_10_1-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_1" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRAC2012-RULE_10_1-e" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_1" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="MISRAC2012-RULE_10_1-f" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_1" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRAC2012-RULE_10_1-g" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_1" desc="Floating-point expressions shall not be explicitly (syntactically) tested for equality (==) or inequality (!=)" id="MISRAC2012-RULE_10_1-h" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_1" desc="Pointers shall not be implicitly compared to NULL" id="MISRAC2012-RULE_10_1-i" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_2" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRAC2012-RULE_10_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRAC2012-RULE_10_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRAC2012-RULE_10_3-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_4" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRAC2012-RULE_10_4-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_4" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRAC2012-RULE_10_4-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_5" desc="The cast operation to essentially enumeration type is not allowed" id="MISRAC2012-RULE_10_5-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_5" desc="Do not cast from or to essentially Boolean type" id="MISRAC2012-RULE_10_5-b" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_5" desc="Do not use casts between essentially character types and essentially floating types" id="MISRAC2012-RULE_10_5-c" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_6" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRAC2012-RULE_10_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_10_8" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRAC2012-RULE_10_8-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="MISRAC2012-RULE_11_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between non compatible pointer to a function types" id="MISRAC2012-RULE_11_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_10" desc="The '_Atomic' qualifier should not be used with the 'void' type" id="MISRAC2012-RULE_11_10-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_2" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRAC2012-RULE_11_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_3" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRAC2012-RULE_11_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_4" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRAC2012-RULE_11_4-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_5" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRAC2012-RULE_11_5-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_6" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRAC2012-RULE_11_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_7" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRAC2012-RULE_11_7-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_8" desc="A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" id="MISRAC2012-RULE_11_8-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_9" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRAC2012-RULE_11_9-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_11_9" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="MISRAC2012-RULE_11_9-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_12_1" desc="Use parentheses to indicate the precedence of operators in expressions" id="MISRAC2012-RULE_12_1-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_12_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRAC2012-RULE_12_1-c" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_12_2" desc="Avoid incorrect shift operations" id="MISRAC2012-RULE_12_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_12_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the essential or underlying type of the left-hand operand" id="MISRAC2012-RULE_12_2-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_12_3" desc="The comma operator shall not be used" id="MISRAC2012-RULE_12_3-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRAC2012-RULE_12_4-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRAC2012-RULE_12_4-b" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_12_5" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRAC2012-RULE_12_5-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_12_6" desc="Members of atomic objects of structure and union types should not be directly accessed" id="MISRAC2012-RULE_12_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_1" desc="Initializer lists shall not contain persistent side effects" id="MISRAC2012-RULE_13_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_13_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_2" desc="Avoid code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_13_2-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_2" desc="Avoid code that depends on the order of evaluation of the function designator and function arguments" id="MISRAC2012-RULE_13_2-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_2" desc="Avoid code that depends on the order of evaluation of expressions involving a function call" id="MISRAC2012-RULE_13_2-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_13_2-e" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_2" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_13_2-f" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_2" desc="Avoid code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_13_2-g" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_2" desc="The value of an expression with atomic type should be independent from thread interleaving" id="MISRAC2012-RULE_13_2-h" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_3" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="MISRAC2012-RULE_13_3-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_4" desc="The result of an assignment operator should not be used" id="MISRAC2012-RULE_13_4-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_5" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRAC2012-RULE_13_5-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRAC2012-RULE_13_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_13_6" desc="The function call shall not be the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_14_1" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRAC2012-RULE_14_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_14_1" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRAC2012-RULE_14_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_14_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRAC2012-RULE_14_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_14_2" desc="The first clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_14_2" desc="The second clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_14_2" desc="The third clause of a 'for' statement shall be well-formed" id="MISRAC2012-RULE_14_2-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_14_3" desc="Avoid conditions that always evaluate to the same value" id="MISRAC2012-RULE_14_3-ac" sev="2">
               <Stats authTot="1;" total="1"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_14_4" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRAC2012-RULE_14_4-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_15_1" desc="The goto statement shall not be used" id="MISRAC2012-RULE_15_1-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_15_2" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRAC2012-RULE_15_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_15_3" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRAC2012-RULE_15_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_15_4" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRAC2012-RULE_15_4-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_15_5" desc="A function shall have a single point of exit at the end of the function" id="MISRAC2012-RULE_15_5-a" sev="4">
               <Stats authTot="2;" total="2"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_15_6" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRAC2012-RULE_15_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_15_6" desc="The statement forming the body of an 'if' or 'else' statement should be a compound statement" id="MISRAC2012-RULE_15_6-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_15_7" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRAC2012-RULE_15_7-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_1" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRAC2012-RULE_16_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_1-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_1-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_1" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_1-e" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_1" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_1-f" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_1" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_1-g" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_1" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_1-h" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_3-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_4" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_4-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_4" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_4-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_5" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_5-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_6" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRAC2012-RULE_17_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="MISRAC2012-RULE_17_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_1" desc="The standard header file &lt;stdarg.h> or &lt;cstdarg> shall not be used" id="MISRAC2012-RULE_17_1-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_10" desc="Functions declared as 'noreturn' shall have the 'void' return type" id="MISRAC2012-RULE_17_10-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_11" desc="Declare non-returning functions with the attribute that specifies that they do not return" id="MISRAC2012-RULE_17_11-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_12" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="MISRAC2012-RULE_17_12-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_13" desc="Do not include any type qualifiers in the specification of a function type" id="MISRAC2012-RULE_17_13-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_2" desc="Functions shall not call themselves, either directly or indirectly" id="MISRAC2012-RULE_17_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_3" desc="Functions shall always have visible prototype at the function call" id="MISRAC2012-RULE_17_3-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-b" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_5" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRAC2012-RULE_17_5-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_6" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRAC2012-RULE_17_6-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-a" sev="2">
               <Stats authTot="1;" total="1"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_8" desc="A function parameter should not be modified" id="MISRAC2012-RULE_17_8-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_17_9" desc="Never return from functions that should not return" id="MISRAC2012-RULE_17_9-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-RULE_18_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays and pointers out of bounds" id="MISRAC2012-RULE_18_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRAC2012-RULE_18_1-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_10" desc="Pointers to variably-modified array types should not be used" id="MISRAC2012-RULE_18_10-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-RULE_18_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_3" desc="Do not compare two unrelated pointers" id="MISRAC2012-RULE_18_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_4" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRAC2012-RULE_18_4-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_5" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRAC2012-RULE_18_5-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_18_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_18_6-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_6" desc="The address of an object with thread storage duration shall not be assigned to an object with static storage duration" id="MISRAC2012-RULE_18_6-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_7" desc="Flexible array members shall not be declared" id="MISRAC2012-RULE_18_7-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_8" desc="Variable-length arrays should not be used" id="MISRAC2012-RULE_18_8-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_18_9" desc="Do not modify objects with temporary lifetime" id="MISRAC2012-RULE_18_9-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-b" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRAC2012-RULE_19_1-c" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_19_2" desc="The union keyword should not be used" id="MISRAC2012-RULE_19_2-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Avoid division by zero" id="MISRAC2012-RULE_1_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Avoid use before initialization" id="MISRAC2012-RULE_1_3-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_1_3-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-RULE_1_3-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_1_3-e" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_1_3-f" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Avoid code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_1_3-g" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Avoid code that depends on the order of evaluation of the function designator and function arguments" id="MISRAC2012-RULE_1_3-h" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Avoid code that depends on the order of evaluation of expressions involving a function call" id="MISRAC2012-RULE_1_3-i" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_1_3-j" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_1_3-k" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="Avoid code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_1_3-l" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_1_3-m" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_1_3-n" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_3" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRAC2012-RULE_1_3-o" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_4" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRAC2012-RULE_1_4-j" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_4" desc="The 'rsize_t' type should not be used" id="MISRAC2012-RULE_1_4-k" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_4" desc="The 'errno_t' type should not be used" id="MISRAC2012-RULE_1_4-l" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_4" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRAC2012-RULE_1_4-m" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_4" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRAC2012-RULE_1_4-n" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_5" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_1_5-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_5" desc="Storage type modifiers shall be associated with the type, not the variable or the function" id="MISRAC2012-RULE_1_5-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_5" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_1_5-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_5" desc="Do not use the macro ATOMIC_VAR_INIT" id="MISRAC2012-RULE_1_5-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_5" desc="Do not use the 'bool', 'false' or 'true' identifiers in the #undef directive" id="MISRAC2012-RULE_1_5-e" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_5" desc="Do not use the ungetc function on a stream with the file position indicator zero" id="MISRAC2012-RULE_1_5-f" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_1_5" desc="Do not pass 0 value as a size argument to the realloc function" id="MISRAC2012-RULE_1_5-g" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRAC2012-RULE_20_1-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_10" desc="The # and ## preprocessor operators should not be used" id="MISRAC2012-RULE_20_10-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_11" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRAC2012-RULE_20_11-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_12" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRAC2012-RULE_20_12-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_13" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRAC2012-RULE_20_13-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_14" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRAC2012-RULE_20_14-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_2" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRAC2012-RULE_20_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_2" desc="The \ character should not occur in a header file name" id="MISRAC2012-RULE_20_2-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_3" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRAC2012-RULE_20_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C90" id="MISRAC2012-RULE_20_4-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C99" id="MISRAC2012-RULE_20_4-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_5" desc="#undef shall not be used" id="MISRAC2012-RULE_20_5-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_6" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRAC2012-RULE_20_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_7" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRAC2012-RULE_20_7-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_8" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRAC2012-RULE_20_8-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_20_9" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRAC2012-RULE_20_9-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRAC2012-RULE_21_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRAC2012-RULE_21_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="MISRAC2012-RULE_21_1-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_1" desc="Do not #define nor #undef identifier 'defined'" id="MISRAC2012-RULE_21_1-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_10" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="MISRAC2012-RULE_21_10-a" sev="2">
               <Stats authTot="1;" total="1"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_10" desc="The time handling functions and macros of the library &lt;time.h> shall not be used" id="MISRAC2012-RULE_21_10-b" sev="2">
               <Stats authTot="1;" total="1"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_10" desc="The types defined in the library &lt;time.h> shall not be used" id="MISRAC2012-RULE_21_10-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_11" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRAC2012-RULE_21_11-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_12" desc="The features provided by &lt;fenv.h> should not be used" id="MISRAC2012-RULE_21_12-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_12" desc="The standard header file &lt;fenv.h> shall not be used" id="MISRAC2012-RULE_21_12-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_13" desc="Do not pass incorrect values to ctype.h library functions" id="MISRAC2012-RULE_21_13-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_14" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="MISRAC2012-RULE_21_14-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_15" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRAC2012-RULE_21_15-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_16" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRAC2012-RULE_21_16-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_17" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-RULE_21_17-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_17" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_21_17-b" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_18" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="MISRAC2012-RULE_21_18-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_19" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRAC2012-RULE_21_19-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_19" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRAC2012-RULE_21_19-b" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRAC2012-RULE_21_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRAC2012-RULE_21_2-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRAC2012-RULE_21_2-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_20" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRAC2012-RULE_21_20-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_21" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRAC2012-RULE_21_21-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_22" desc="All arguments to any type-generic macros declared in &lt;tgmath.h> shall have appropriate essential type" id="MISRAC2012-RULE_21_22-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_23" desc="All arguments to any multi-argument type-generic macros declared in &lt;tgmath.h> shall have the same standard type" id="MISRAC2012-RULE_21_23-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_24" desc="The random number generator functions 'rand()' and 'srand()' should not be used" id="MISRAC2012-RULE_21_24-a" sev="2">
               <Stats authTot="2;" total="2"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_25" desc="Only 'memory_order_seq_cst' should be used as an explicit memory order argument" id="MISRAC2012-RULE_21_25-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_26" desc="The Standard Library function mtx_timedlock() shall not be invoked on a mutex that does not support timeout" id="MISRAC2012-RULE_21_26-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_3" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-RULE_21_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_4" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRAC2012-RULE_21_4-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_4" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRAC2012-RULE_21_4-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_5" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="MISRAC2012-RULE_21_5-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_5" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_6" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="MISRAC2012-RULE_21_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_7" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRAC2012-RULE_21_7-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_8" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_8" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_8" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_21_9" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRAC2012-RULE_21_9-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_1" desc="Ensure resources are freed" id="MISRAC2012-RULE_22_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_10" desc="Properly use errno value" id="MISRAC2012-RULE_22_10-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_11" desc="Do not join or detach a thread that was previously joined or detached" id="MISRAC2012-RULE_22_11-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_12" desc="Thread objects, thread synchronization objects, and thread-specific storage pointers shall only be accessed by the appropriate Standard Library functions" id="MISRAC2012-RULE_22_12-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_13" desc="Thread objects, thread synchronization objects and thread-specific storage pointers shall not have automatic storage duration" id="MISRAC2012-RULE_22_13-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_14" desc="A thread synchronization object should not be initialized by a thread" id="MISRAC2012-RULE_22_14-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_14" desc="The second argument passed to the 'mtx_init()' function call should be either 'mtx_plain', 'mtx_timed', 'mtx_plain | mtx_recursive', or 'mtx_timed | mtx_recursive'" id="MISRAC2012-RULE_22_14-b" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_15" desc="A thread synchronization object should not be destroyed by a thread" id="MISRAC2012-RULE_22_15-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_16" desc="Do not abandon unreleased locks" id="MISRAC2012-RULE_22_16-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_17" desc="Do not release a lock that has not been acquired" id="MISRAC2012-RULE_22_17-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_18" desc="Avoid double locking" id="MISRAC2012-RULE_22_18-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_19" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="MISRAC2012-RULE_22_19-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_2" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_2-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_2" desc="Do not free resources using invalid pointers" id="MISRAC2012-RULE_22_2-b" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_20" desc="A thread-specific storage should not be created by a thread" id="MISRAC2012-RULE_22_20-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_3" desc="The same file shall not be opened for read and write access at the same time on different streams" id="MISRAC2012-RULE_22_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_4" desc="Avoid writing to a stream which has been opened as read only" id="MISRAC2012-RULE_22_4-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced" id="MISRAC2012-RULE_22_5-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRAC2012-RULE_22_5-b" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_6" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_6-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_7" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="MISRAC2012-RULE_22_7-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_8" desc="Properly use errno value" id="MISRAC2012-RULE_22_8-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_22_9" desc="Properly use errno value" id="MISRAC2012-RULE_22_9-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_23_1" desc="A generic selection should only be expanded from a macro" id="MISRAC2012-RULE_23_1-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_23_1" desc="A generic selection used in a macro definition should have a macro parameter in the controlling expression" id="MISRAC2012-RULE_23_1-b" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_23_2" desc="A generic selection that is not expanded from a macro shall not contain potential side effects in the controlling expression" id="MISRAC2012-RULE_23_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_23_3" desc="A generic selection shall indicate at least one non-default association" id="MISRAC2012-RULE_23_3-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_23_4" desc="A generic association shall list an appropriate type" id="MISRAC2012-RULE_23_4-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_23_5" desc="A generic selection should not depend on implicit pointer type conversion" id="MISRAC2012-RULE_23_5-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_23_6" desc="The controlling expression of a generic selection shall have an essential type that matches its standard type" id="MISRAC2012-RULE_23_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_23_6" desc="Enumerated types should not be mixed with integer types in generic selections" id="MISRAC2012-RULE_23_6-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_23_7" desc="A generic selection that is expanded from a macro shall evaluate its argument only once" id="MISRAC2012-RULE_23_7-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_23_8" desc="The default association shall be placed first or last in the association list" id="MISRAC2012-RULE_23_8-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRAC2012-RULE_2_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="MISRAC2012-RULE_2_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRAC2012-RULE_2_1-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in switch statement" id="MISRAC2012-RULE_2_1-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in 'for' loop" id="MISRAC2012-RULE_2_1-e" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRAC2012-RULE_2_1-f" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRAC2012-RULE_2_1-g" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_1" desc="Avoid unreachable methods" id="MISRAC2012-RULE_2_1-h" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRAC2012-RULE_2_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_2" desc="Avoid unused values" id="MISRAC2012-RULE_2_2-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_3" desc="A function should not contain unused type declarations" id="MISRAC2012-RULE_2_3-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_3" desc="A source file should not contain unused type declarations" id="MISRAC2012-RULE_2_3-b" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_4" desc="A function should not contain unused local tag declarations" id="MISRAC2012-RULE_2_4-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_4" desc="A source file should not contain unused tag declarations" id="MISRAC2012-RULE_2_4-b" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_5" desc="A source file should not contain unused macro definitions" id="MISRAC2012-RULE_2_5-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_6" desc="A function should not contain unused label declarations" id="MISRAC2012-RULE_2_6-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_7" desc="There should be no unused parameters in functions" id="MISRAC2012-RULE_2_7-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_8" desc="A project should not contain unused variables with external linkage" id="MISRAC2012-RULE_2_8-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_8" desc="A project should not contain unused variables with internal linkage" id="MISRAC2012-RULE_2_8-b" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_2_8" desc="A project should not contain unused local variables" id="MISRAC2012-RULE_2_8-c" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_3_1" desc="The character sequence // shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRAC2012-RULE_3_1-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_3_2" desc="Line-splicing shall not be used in // comments" id="MISRAC2012-RULE_3_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_4_1" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRAC2012-RULE_4_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_4_2" desc="Trigraphs shall not be used" id="MISRAC2012-RULE_4_2-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_1" desc="External identifiers shall be distinct" id="MISRAC2012-RULE_5_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_3" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRAC2012-RULE_5_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_3" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRAC2012-RULE_5_3-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRAC2012-RULE_5_4-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRAC2012-RULE_5_4-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRAC2012-RULE_5_4-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRAC2012-RULE_5_4-d" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="MISRAC2012-RULE_5_5-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="MISRAC2012-RULE_5_5-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_6" desc="A typedef name shall be a unique identifier" id="MISRAC2012-RULE_5_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_7" desc="A tag name shall be a unique identifier" id="MISRAC2012-RULE_5_7-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_8" desc="Identifiers that define objects with external linkage shall be unique" id="MISRAC2012-RULE_5_8-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_8" desc="Identifiers that define functions with external linkage shall be unique" id="MISRAC2012-RULE_5_8-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_9" desc="Identifiers that define objects with internal linkage shall be unique" id="MISRAC2012-RULE_5_9-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_5_9" desc="Identifiers that define functions with internal linkage shall be unique" id="MISRAC2012-RULE_5_9-b" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRAC2012-RULE_6_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_6_2" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRAC2012-RULE_6_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_6_3" desc="A member of a union shall not be declared as a bit-field" id="MISRAC2012-RULE_6_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_7_1" desc="Octal constants (other than zero) shall not be used" id="MISRAC2012-RULE_7_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_7_2" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRAC2012-RULE_7_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_7_3" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="MISRAC2012-RULE_7_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_7_4" desc="A string literal shall not be modified" id="MISRAC2012-RULE_7_4-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_7_5" desc="Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values" id="MISRAC2012-RULE_7_5-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_7_6" desc="The small integer variants of the minimum-width integer constant macros should not be used" id="MISRAC2012-RULE_7_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_1" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_1" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_10" desc="An inline function shall be declared with the static storage class" id="MISRAC2012-RULE_8_10-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_11" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRAC2012-RULE_8_11-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_12" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRAC2012-RULE_8_12-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_13" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-b" sev="4">
               <Stats authTot="2;" total="2"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_14" desc="The restrict type qualifier shall not be used" id="MISRAC2012-RULE_8_14-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_15" desc="Explicit alignment specifiers in all declarations of an object with external linkage shall be the same" id="MISRAC2012-RULE_8_15-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_15" desc="Explicit alignment specifiers in all declarations of an object with internal linkage shall be the same" id="MISRAC2012-RULE_8_15-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_16" desc="The zero-alignment specifier should not be used in an object declaration" id="MISRAC2012-RULE_8_16-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_17" desc="A declaration of an object should contain at most one explicit alignment specifier" id="MISRAC2012-RULE_8_17-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_2" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRAC2012-RULE_8_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_2" desc="Function types shall have named parameters" id="MISRAC2012-RULE_8_2-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_2" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_8_2-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_3" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRAC2012-RULE_8_3-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_3" desc="All declarations of an object or function shall have compatible types" id="MISRAC2012-RULE_8_3-c" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_4" desc="A declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_4" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_4-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_5" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRAC2012-RULE_8_5-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have no more then one external definition" id="MISRAC2012-RULE_8_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have external definition" id="MISRAC2012-RULE_8_6-b" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_7" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRAC2012-RULE_8_7-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_8" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_8_8-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_8_9" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRAC2012-RULE_8_9-a" sev="4">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_9_1" desc="Avoid use before initialization" id="MISRAC2012-RULE_9_1-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_9_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRAC2012-RULE_9_2-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_9_3" desc="Arrays shall not be partially initialized" id="MISRAC2012-RULE_9_3-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_9_4" desc="An element of an object shall not be initialized more than once" id="MISRAC2012-RULE_9_4-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_9_5" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRAC2012-RULE_9_5-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_9_6" desc="An initializer using chained designators shall not contain initializers without designators" id="MISRAC2012-RULE_9_6-a" sev="2">
               <Stats authTot="0;" total="0"/>
            </Rule>
            <Rule cat="MISRAC2012-RULE_9_7" desc="Atomic objects shall be properly initialized before being accessed" id="MISRAC2012-RULE_9_7-a" sev="1">
               <Stats authTot="0;" total="0"/>
            </Rule>
         </RulesList>
         <CategoriesList>
            <Category desc="MISRA C 2023 (MISRA C 2012)" name="MISRAC2012" total="385">
               <Category desc="Rule 11.3 (Required) A conversion shall not be performed between a pointer to object type and a pointer to a different object type" name="MISRAC2012-RULE_11_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" name="MISRAC2012-RULE_8_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" name="MISRAC2012-RULE_11_4" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" name="MISRAC2012-RULE_8_6" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" name="MISRAC2012-RULE_11_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" name="MISRAC2012-RULE_8_3" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" name="MISRAC2012-RULE_11_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" name="MISRAC2012-RULE_11_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.9 (Advisory) An object should be declared at block scope if its identifier only appears in a single function" name="MISRAC2012-RULE_8_9" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 11.8 (Required) A conversion shall not remove any const, volatile or _Atomic qualification from the type pointed to by a pointer" name="MISRAC2012-RULE_11_8" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" name="MISRAC2012-RULE_11_9" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" name="MISRAC2012-RULE_19_1" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" name="MISRAC2012-RULE_8_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.15 (Required) Evaluation of floating-point expressions shall not lead to the undetected generation of infinities and NaNs" name="MISRAC2012-DIR_4_15" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 19.2 (Advisory) The union keyword should not be used" name="MISRAC2012-RULE_19_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" name="MISRAC2012-RULE_8_8" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.14 (Required) The validity of values received from external sources shall be checked" name="MISRAC2012-DIR_4_14" total="12">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" name="MISRAC2012-DIR_4_13" total="6">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.12 (Required) Dynamic memory allocation shall not be used" name="MISRAC2012-DIR_4_12" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" name="MISRAC2012-DIR_4_11" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRAC2012-DIR_4_10" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 5.3 (Required) There shall be no dynamic thread creation" name="MISRAC2012-DIR_5_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 5.2 (Required) There shall be no deadlocks between threads" name="MISRAC2012-DIR_5_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 5.1 (Required) There shall be no data races between threads" name="MISRAC2012-DIR_5_1" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 11.10 (Required) The _Atomic qualifier shall not be applied to the incomplete type void" name="MISRAC2012-RULE_11_10" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.1 (Required) Types shall be explicitly specified" name="MISRAC2012-RULE_8_1" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" name="MISRAC2012-RULE_8_2" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" name="MISRAC2012-RULE_11_1" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" name="MISRAC2012-RULE_11_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" name="MISRAC2012-RULE_22_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" name="MISRAC2012-RULE_22_4" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" name="MISRAC2012-RULE_22_5" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" name="MISRAC2012-RULE_22_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" name="MISRAC2012-RULE_22_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" name="MISRAC2012-RULE_22_8" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" name="MISRAC2012-RULE_22_1" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a Standard Library function" name="MISRAC2012-RULE_22_2" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" name="MISRAC2012-RULE_10_4" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 7.6 (Required) The small integer variants of the minimum-width integer constant macros shall not be used" name="MISRAC2012-RULE_7_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" name="MISRAC2012-RULE_10_5" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" name="MISRAC2012-RULE_10_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" name="MISRAC2012-RULE_7_4" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" name="MISRAC2012-RULE_10_7" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 7.5 (Mandatory) The argument of an integer constant macro shall have an appropriate form" name="MISRAC2012-RULE_7_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" name="MISRAC2012-RULE_10_8" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" name="MISRAC2012-RULE_18_1" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRAC2012-RULE_18_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 18.3 (Required) The relational operators >, >=, &lt; and &lt;= shall not be applied to expressions of pointer type except where they point into the same object" name="MISRAC2012-RULE_18_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" name="MISRAC2012-RULE_18_4" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" name="MISRAC2012-RULE_18_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 18.6 (Required) The address of an object with automatic or thread-local storage shall not be copied to another object that persists after the first object has ceased to exist" name="MISRAC2012-RULE_18_6" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 18.7 (Required) Flexible array members shall not be declared" name="MISRAC2012-RULE_18_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 18.8 (Required) Variable-length arrays shall not be used" name="MISRAC2012-RULE_18_8" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 18.9 (Required) An object with temporary lifetime shall not undergo array-to-pointer conversion" name="MISRAC2012-RULE_18_9" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" name="MISRAC2012-RULE_7_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" total="9">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" name="MISRAC2012-RULE_7_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" name="MISRAC2012-RULE_10_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" name="MISRAC2012-RULE_10_3" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 7.1 (Required) Octal constants shall not be used" name="MISRAC2012-RULE_7_1" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.4 (Required) The standard header file &lt;setjmp.h> shall not be used" name="MISRAC2012-RULE_21_4" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.5 (Required) The standard header file &lt;signal.h> shall not be used" name="MISRAC2012-RULE_21_5" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" name="MISRAC2012-RULE_21_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.7 (Required) The Standard Library functions atof, atoi, atol and atoll of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_8" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.9 (Required) The Standard Library functions bsearch and qsort of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_9" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" name="MISRAC2012-RULE_21_1" total="4">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" name="MISRAC2012-RULE_21_2" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" name="MISRAC2012-RULE_13_1" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.25 (Required) All memory synchronization operations shall be executed in sequentially consistent order" name="MISRAC2012-RULE_21_25" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" name="MISRAC2012-RULE_13_2" total="8">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.24 (Required) The random number generator functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_24" total="1">
                  <Stats authTot="2;" total="2"/>
               </Category>
               <Category desc="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" name="MISRAC2012-RULE_13_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.23 (Required) All operand arguments to any multi-argument type-generic macros declared in &lt;tgmath.h> shall have the same standard type" name="MISRAC2012-RULE_21_23" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 13.4 (Advisory) The result of an assignment operator should not be used" name="MISRAC2012-RULE_13_4" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.22 (Mandatory) All operand arguments to any type-generic macros declared in &lt;tgmath.h> shall have an appropriate essential type" name="MISRAC2012-RULE_21_22" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" name="MISRAC2012-RULE_13_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_21" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" name="MISRAC2012-RULE_13_6" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" name="MISRAC2012-RULE_21_20" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 18.10 (Mandatory) Pointers to variably-modified array types shall not be used" name="MISRAC2012-RULE_18_10" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.26 (Required) The Standard Library function mtx_timedlock() shall only be invoked on mutex objects of appropriate mutex type" name="MISRAC2012-RULE_21_26" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 2.3 (Advisory) A project should not contain unused type declarations" name="MISRAC2012-RULE_2_3" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 2.4 (Advisory) A project should not contain unused tag declarations" name="MISRAC2012-RULE_2_4" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 2.1 (Required) A project shall not contain unreachable code" name="MISRAC2012-RULE_2_1" total="8">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 2.2 (Required) A project shall not contain dead code" name="MISRAC2012-RULE_2_2" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 2.7 (Advisory) A function should not contain unused parameters" name="MISRAC2012-RULE_2_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 2.8 (Advisory) A project should not contain unused object definitions" name="MISRAC2012-RULE_2_8" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 2.5 (Advisory) A project should not contain unused macro definitions" name="MISRAC2012-RULE_2_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 2.6 (Advisory) A function should not contain unused label declarations" name="MISRAC2012-RULE_2_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" name="MISRAC2012-RULE_12_2" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.15 (Required) Thread synchronization objects and thread-specific storage pointers shall not be destroyed until after all threads accessing them have terminated" name="MISRAC2012-RULE_22_15" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 9.4 (Required) An element of an object shall not be initialized more than once" name="MISRAC2012-RULE_9_4" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 12.3 (Advisory) The comma operator should not be used" name="MISRAC2012-RULE_12_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.14 (Mandatory) Thread synchronization objects shall be initialized before being accessed" name="MISRAC2012-RULE_22_14" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" name="MISRAC2012-RULE_9_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" name="MISRAC2012-RULE_12_4" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.13 (Required) Thread objects, thread synchronization objects and thread-specific storage pointers shall have appropriate storage duration" name="MISRAC2012-RULE_22_13" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" name="MISRAC2012-RULE_9_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" name="MISRAC2012-RULE_12_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.12 (Mandatory) Thread objects, thread synchronization objects, and thread-specific storage pointers shall only be accessed by the appropriate Standard Library functions" name="MISRAC2012-RULE_22_12" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 9.3 (Required) Arrays shall not be partially initialized" name="MISRAC2012-RULE_9_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 12.6 (Required) Structure and union members of atomic objects shall not be directly accessed" name="MISRAC2012-RULE_12_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.11 (Required) A thread that was previously either joined or detached shall not be subsequently joined nor detached" name="MISRAC2012-RULE_22_11" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 9.6 (Required) An initializer using chained designators shall not contain initializers without designators" name="MISRAC2012-RULE_9_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 9.7 (Mandatory) Atomic objects shall be appropriately initialized before being accessed" name="MISRAC2012-RULE_9_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" name="MISRAC2012-DIR_4_9" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" name="MISRAC2012-DIR_4_8" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" name="MISRAC2012-DIR_4_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.19 (Required) A condition variable shall be associated with at most one mutex object" name="MISRAC2012-RULE_22_19" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRAC2012-DIR_4_4" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.18 (Required) Non-recursive mutexes shall not be recursively locked" name="MISRAC2012-RULE_22_18" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" name="MISRAC2012-DIR_4_7" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.17 (Required) No thread shall unlock a mutex or call cnd_wait() or cnd_timedwait() for a mutex it has not locked before" name="MISRAC2012-RULE_22_17" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" name="MISRAC2012-DIR_4_6" total="5">
                  <Stats authTot="6;" total="6"/>
               </Category>
               <Category desc="Rule 22.16 (Required) All mutex objects locked by a thread shall be explicitly unlocked by the same thread" name="MISRAC2012-RULE_22_16" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.1 (Required) Run-time failures shall be minimized" name="MISRAC2012-DIR_4_1" total="12">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRAC2012-RULE_8_12" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" name="MISRAC2012-RULE_8_13" total="2">
                  <Stats authTot="2;" total="2"/>
               </Category>
               <Category desc="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" name="MISRAC2012-DIR_4_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.14 (Required) The restrict type qualifier shall not be used" name="MISRAC2012-RULE_8_14" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Dir 4.2 (Advisory) All usage of assembly language should be documented" name="MISRAC2012-DIR_4_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.15 (Required) All declarations of an object with an explicit alignment specification shall specify the same alignment" name="MISRAC2012-RULE_8_15" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" name="MISRAC2012-RULE_1_1" total="4">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.10 (Required) An inline function shall be declared with the static storage class" name="MISRAC2012-RULE_8_10" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRAC2012-RULE_8_11" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 1.4 (Required) Emergent language features shall not be used" name="MISRAC2012-RULE_1_4" total="5">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 1.5 (Required) Obsolescent language features shall not be used" name="MISRAC2012-RULE_1_5" total="7">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRAC2012-RULE_1_3" total="15">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.16 (Advisory) The alignment specification of zero should not appear in an object declaration" name="MISRAC2012-RULE_8_16" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 8.17 (Advisory) At most one explicit alignment specifier should appear in an object declaration" name="MISRAC2012-RULE_8_17" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" name="MISRAC2012-RULE_9_1" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" name="MISRAC2012-RULE_12_1" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.10 (Required) A function declared with a _Noreturn function specifier shall have void return type" name="MISRAC2012-RULE_17_10" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 23.2 (Required) A generic selection that is not expanded from a macro shall not contain potential side effects in the controlling expression" name="MISRAC2012-RULE_23_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.11 (Advisory) A function that never returns should be declared with a _Noreturn function specifier" name="MISRAC2012-RULE_17_11" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 23.3 (Advisory) A generic selection should contain at least one non-default association" name="MISRAC2012-RULE_23_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.12 (Advisory) A function identifier should only be used with either a preceding &amp;, or with a parenthesized parameter list" name="MISRAC2012-RULE_17_12" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 23.4 (Required) A generic association shall list an appropriate type" name="MISRAC2012-RULE_23_4" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.13 (Required) A function type shall not be type qualified" name="MISRAC2012-RULE_17_13" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 23.5 (Advisory) A generic selection should not depend on implicit pointer type conversion" name="MISRAC2012-RULE_23_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 23.6 (Required) The controlling expression of a generic selection shall have an essential type that matches its standard type" name="MISRAC2012-RULE_23_6" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 23.7 (Advisory) A generic selection that is expanded from a macro should evaluate its argument only once" name="MISRAC2012-RULE_23_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 22.20 (Mandatory) Thread-specific storage pointers shall be created before being accessed" name="MISRAC2012-RULE_22_20" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 23.8 (Required) A default association shall appear as either the first or the last association of a generic selection" name="MISRAC2012-RULE_23_8" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 23.1 (Advisory) A generic selection should only be expanded from a macro" name="MISRAC2012-RULE_23_1" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRAC2012-RULE_20_13" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" name="MISRAC2012-RULE_20_12" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 15.1 (Advisory) The goto statement should not be used" name="MISRAC2012-RULE_15_1" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" name="MISRAC2012-RULE_20_11" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" name="MISRAC2012-RULE_15_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" name="MISRAC2012-RULE_20_10" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" name="MISRAC2012-RULE_15_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" name="MISRAC2012-RULE_15_4" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" total="1">
                  <Stats authTot="2;" total="2"/>
               </Category>
               <Category desc="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRAC2012-RULE_15_6" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRAC2012-RULE_15_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRAC2012-RULE_20_14" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" name="MISRAC2012-RULE_4_1" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 4.2 (Advisory) Trigraphs should not be used" name="MISRAC2012-RULE_4_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 14.1 (Required) A loop counter shall not have essentially floating type" name="MISRAC2012-RULE_14_1" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 14.2 (Required) A for loop shall be well-formed" name="MISRAC2012-RULE_14_2" total="4">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 14.3 (Required) Controlling expressions shall not be invariant" name="MISRAC2012-RULE_14_3" total="1">
                  <Stats authTot="1;" total="1"/>
               </Category>
               <Category desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 3.2 (Required) Line-splicing shall not be used in // comments" name="MISRAC2012-RULE_3_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" name="MISRAC2012-RULE_3_1" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" name="MISRAC2012-RULE_21_14" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h> shall be representable as an unsigned char or be the value EOF" name="MISRAC2012-RULE_21_13" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.12 (Required) The standard header file &lt;fenv.h> shall not be used" name="MISRAC2012-RULE_21_12" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.11 (Advisory) The standard header file &lt;tgmath.h> should not be used" name="MISRAC2012-RULE_21_11" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" name="MISRAC2012-RULE_21_10" total="3">
                  <Stats authTot="2;" total="2"/>
               </Category>
               <Category desc="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or strerror shall only be used as if they have pointer to const-qualified type" name="MISRAC2012-RULE_21_19" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h> shall have an appropriate value" name="MISRAC2012-RULE_21_18" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" name="MISRAC2012-RULE_21_17" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" name="MISRAC2012-RULE_21_16" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" name="MISRAC2012-RULE_21_15" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.1 (Required) The standard header file &lt;stdarg.h> shall not be used" name="MISRAC2012-RULE_17_1" total="3">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRAC2012-RULE_17_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.3 (Mandatory) A function shall not be declared implicitly" name="MISRAC2012-RULE_17_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="MISRAC2012-RULE_17_4" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" name="MISRAC2012-RULE_17_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" name="MISRAC2012-RULE_17_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" name="MISRAC2012-RULE_17_7" total="2">
                  <Stats authTot="1;" total="1"/>
               </Category>
               <Category desc="Rule 17.8 (Advisory) A function parameter should not be modified" name="MISRAC2012-RULE_17_8" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 17.9 (Mandatory) A function declared with a _Noreturn function specifier shall not return to its caller" name="MISRAC2012-RULE_17_9" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 6.3 (Required) A bit field shall not be declared as a member of a union" name="MISRAC2012-RULE_6_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" name="MISRAC2012-RULE_6_1" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" name="MISRAC2012-RULE_6_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.5 (Advisory) #undef should not be used" name="MISRAC2012-RULE_20_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRAC2012-RULE_20_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" name="MISRAC2012-RULE_20_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" name="MISRAC2012-RULE_20_8" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" name="MISRAC2012-RULE_20_9" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRAC2012-RULE_20_1" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRAC2012-RULE_20_2" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRAC2012-RULE_20_3" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" name="MISRAC2012-RULE_20_4" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" name="MISRAC2012-RULE_5_8" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" name="MISRAC2012-RULE_5_9" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 5.6 (Required) A typedef name shall be a unique identifier" name="MISRAC2012-RULE_5_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 16.1 (Required) All switch statements shall be well-formed" name="MISRAC2012-RULE_16_1" total="8">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 5.7 (Required) A tag name shall be a unique identifier" name="MISRAC2012-RULE_5_7" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="MISRAC2012-RULE_16_2" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" name="MISRAC2012-RULE_16_3" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 16.4 (Required) Every switch statement shall have a default label" name="MISRAC2012-RULE_16_4" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" name="MISRAC2012-RULE_16_5" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" name="MISRAC2012-RULE_16_6" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" name="MISRAC2012-RULE_16_7" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 5.1 (Required) External identifiers shall be distinct" name="MISRAC2012-RULE_5_1" total="1">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 5.4 (Required) Macro identifiers shall be distinct" name="MISRAC2012-RULE_5_4" total="4">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 5.5 (Required) Identifiers shall be distinct from macro names" name="MISRAC2012-RULE_5_5" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" name="MISRAC2012-RULE_5_2" total="4">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Category desc="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="MISRAC2012-RULE_5_3" total="2">
                  <Stats authTot="0;" total="0"/>
               </Category>
               <Stats authTot="0;" total="0"/>
            </Category>
         </CategoriesList>
         <SeverityList>
            <Severity id="2">
               <Stats authTot="6;" total="6"/>
            </Severity>
            <Severity id="4">
               <Stats authTot="10;" total="10"/>
            </Severity>
         </SeverityList>
      </Rules>
      
  <StdViols>
    <StdViol msg="Do not include the &lt;time.h> header file" ln="3" sev="2" auth="danie" rule="MISRAC2012-RULE_21_10-a" tool="c++test" cat="MISRAC2012-RULE_21_10" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="3" locStartPos="0" locEndLn="3" locEndPos="1" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="The standard integer type 'int' should not be used" ln="9" sev="4" auth="danie" rule="MISRAC2012-DIR_4_6-b" tool="c++test" cat="MISRAC2012-DIR_4_6" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="9" locStartPos="4" locEndLn="9" locEndPos="5" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="Declare parameter 'sem' as typedef to pointer to const object" ln="15" sev="4" auth="danie" rule="MISRAC2012-RULE_8_13-b" tool="c++test" cat="MISRAC2012-RULE_8_13" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="15" locStartPos="19" locEndLn="15" locEndPos="20" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="The standard integer type 'int' should not be used" ln="15" sev="4" auth="danie" rule="MISRAC2012-DIR_4_6-b" tool="c++test" cat="MISRAC2012-DIR_4_6" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="15" locStartPos="0" locEndLn="15" locEndPos="1" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="The standard integer type 'int' should not be used" ln="15" sev="4" auth="danie" rule="MISRAC2012-DIR_4_6-b" tool="c++test" cat="MISRAC2012-DIR_4_6" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="15" locStartPos="24" locEndLn="15" locEndPos="25" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="Declare parameter 'sem' as typedef to pointer to const object" ln="20" sev="4" auth="danie" rule="MISRAC2012-RULE_8_13-b" tool="c++test" cat="MISRAC2012-RULE_8_13" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="20" locStartPos="19" locEndLn="20" locEndPos="20" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="The standard integer type 'int' should not be used" ln="20" sev="4" auth="danie" rule="MISRAC2012-DIR_4_6-b" tool="c++test" cat="MISRAC2012-DIR_4_6" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="20" locStartPos="0" locEndLn="20" locEndPos="1" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="The standard integer type 'int' should not be used" ln="28" sev="4" auth="danie" rule="MISRAC2012-DIR_4_6-b" tool="c++test" cat="MISRAC2012-DIR_4_6" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="28" locStartPos="4" locEndLn="28" locEndPos="5" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="The 'srand()' function should not be used" ln="31" sev="2" auth="danie" rule="MISRAC2012-RULE_21_24-a" tool="c++test" cat="MISRAC2012-RULE_21_24" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="31" locStartPos="4" locEndLn="31" locEndPos="5" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="The standard integer type 'int' should not be used" ln="31" sev="4" auth="danie" rule="MISRAC2012-DIR_4_6-b" tool="c++test" cat="MISRAC2012-DIR_4_6" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="31" locStartPos="20" locEndLn="31" locEndPos="21" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="Usage of 'time' function is not allowed" ln="31" sev="2" auth="danie" rule="MISRAC2012-RULE_21_10-b" tool="c++test" cat="MISRAC2012-RULE_21_10" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="31" locStartPos="24" locEndLn="31" locEndPos="25" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="The 'rand()' function should not be used" ln="32" sev="2" auth="danie" rule="MISRAC2012-RULE_21_24-a" tool="c++test" cat="MISRAC2012-RULE_21_24" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="32" locStartPos="10" locEndLn="32" locEndPos="11" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <FlowViol msg="Condition &quot;0 == semTake(...)&quot; always evaluates to true" ln="35" ruleSAFMsg="Point where senseless condition is used" auth="danie" sev="2" rule="MISRAC2012-RULE_14_3-ac" ruleSCSCMsg="Start of the path" tool="c++test" id="741365124" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="35" locStartPos="0" locEndLn="36" locEndPos="0" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" FirstElSrcRngStartln="25" FirstElSrcRngStartPos="0" FirstElSrcRngEndLn="26" FirstElSrcRngEndPos="0" FirstElSrcRngFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp">
      <ElDescList>
        <ElDesc srcRngStartln="25" srcRngStartPos="0" srcRngEndLn="26" srcRngEndPos="0" srcRngFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" srcRnghash="1120252885" ln="25" ElType=".C" desc="int main() {" rngLn="25">
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc srcRngStartln="26" srcRngStartPos="0" srcRngEndLn="27" srcRngEndPos="0" srcRngFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" srcRnghash="1120252885" ln="26" ElType="." desc="SEMAPHORE mySem;" rngLn="26"/>
        <ElDesc srcRngStartln="27" srcRngStartPos="0" srcRngEndLn="28" srcRngEndPos="0" srcRngFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" srcRnghash="1120252885" ln="27" ElType="." desc="SEM_ID sem_id_example = &amp;mySem;" rngLn="27"/>
        <ElDesc srcRngStartln="28" srcRngStartPos="0" srcRngEndLn="29" srcRngEndPos="0" srcRngFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" srcRnghash="1120252885" ln="28" ElType="." desc="int ret;" rngLn="28"/>
        <ElDesc srcRngStartln="31" srcRngStartPos="0" srcRngEndLn="32" srcRngEndPos="0" srcRngFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" srcRnghash="1120252885" ln="31" ElType="." desc="srand((unsigned int)time(NULL));" rngLn="31"/>
        <ElDesc srcRngStartln="32" srcRngStartPos="0" srcRngEndLn="33" srcRngEndPos="0" srcRngFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" srcRnghash="1120252885" ln="32" ElType="." desc="ret = rand() % 2;" rngLn="32"/>
        <ElDesc srcRngStartln="35" srcRngStartPos="0" srcRngEndLn="36" srcRngEndPos="0" srcRngFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" srcRnghash="1120252885" ln="35" ElType="!" desc="semTake(...)" rngLn="35">
          <ElDescList>
            <ElDesc srcRngStartln="17" srcRngStartPos="0" srcRngEndLn="18" srcRngEndPos="0" srcRngFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" srcRnghash="1120252885" ln="17" ElType="!" desc="return OK;" rngLn="17"/>
          </ElDescList>
        </ElDesc>
        <ElDesc srcRngStartln="35" srcRngStartPos="0" srcRngEndLn="36" srcRngEndPos="0" srcRngFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" srcRnghash="1120252885" ln="35" ElType=".P" desc="if (OK == semTake(sem_id_example, WAIT_FOREVER)) {" rngLn="35">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Provide only one exit point in 'main' function" ln="38" sev="4" auth="danie" rule="MISRAC2012-RULE_15_5-a" tool="c++test" cat="MISRAC2012-RULE_15_5" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="38" locStartPos="12" locEndLn="38" locEndPos="13" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="Unused function's &quot;semGive&quot; return value" ln="41" sev="2" auth="danie" rule="MISRAC2012-RULE_17_7-a" tool="c++test" cat="MISRAC2012-RULE_17_7" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="41" locStartPos="8" locEndLn="41" locEndPos="9" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
    <StdViol msg="Provide only one exit point in 'main' function" ln="44" sev="4" auth="danie" rule="MISRAC2012-RULE_15_5-a" tool="c++test" cat="MISRAC2012-RULE_15_5" lang="cpp" locType="sr" config="1" hash="1120252885" locStartln="44" locStartPos="4" locEndLn="44" locEndPos="5" locFile="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp"/>
  </StdViols>

      <Supps/>
      
      <TestedFilesDetails>
         <Total name="Suppressed / Total" supp="0" total="16">
            <Project name="MLM_FP-2_BD-TRS-LOCK-1" supp="0" total="16">
               <Res name="Source Files" supp="0" total="16">
                  <Res loc="MLM_FP-2_BD-TRS-LOCK-1/MLM_FP-2_BD-TRS-LOCK-1/Source Files/MLM_FP-2_BD-TRS-LOCK-1.cpp" locType="sr" name="MLM_FP-2_BD-TRS-LOCK-1.cpp" supp="0" total="16"/>
               </Res>
            </Project>
         </Total>
      </TestedFilesDetails>
   
   </CodingStandards>
   <AssocUrls/>
</ResultsSession>